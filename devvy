#!/bin/bash

# Devvy - Development Container Management CLI
# A local CLI tool for managing the devvy development container

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Container name
CONTAINER_NAME="claude-dev"

# Ensure we're in the devvy repo directory
if [ ! -f "$SCRIPT_DIR/docker-compose.yml" ]; then
    echo -e "${RED}Error: This command must be run from the devvy repository directory${NC}"
    exit 1
fi

# Change to script directory for all operations
cd "$SCRIPT_DIR"

# Function to print header
print_header() {
    echo -e "${CYAN}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}${BOLD}  Devvy - Development Container Management${NC}"
    echo -e "${CYAN}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# Function to show help
show_help() {
    print_header
    echo -e "${BOLD}Usage:${NC} ./devvy <command> [options]"
    echo
    echo -e "${BOLD}Commands:${NC}"
    echo -e "  ${GREEN}start${NC}, ${GREEN}up${NC}        Start the development container"
    echo -e "  ${GREEN}stop${NC}, ${GREEN}down${NC}       Stop the development container"
    echo -e "  ${GREEN}connect${NC}          Connect to container via mosh and attach to tmux"
    echo -e "  ${GREEN}logs${NC}             Show and follow container logs"
    echo -e "  ${GREEN}rebuild${NC}          Rebuild container from scratch (no cache)"
    echo -e "  ${GREEN}init${NC}             Run initial setup"
    echo -e "  ${GREEN}sync${NC} <target>    Sync settings (cursor-settings, vscode-settings)"
    echo -e "  ${GREEN}cleanup${NC}          Clean up containers and volumes"
    echo -e "  ${GREEN}status${NC}           Show container status"
    echo -e "  ${GREEN}help${NC}             Show this help message"
    echo
    echo -e "${BOLD}Examples:${NC}"
    echo -e "  ./devvy start"
    echo -e "  ./devvy connect"
    echo -e "  ./devvy sync cursor-settings"
    echo
}

# Function to check if container is running
is_running() {
    docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"
}

# Function to show status
show_status() {
    echo -e "${BOLD}Container Status:${NC}"
    if is_running; then
        echo -e "  ${GREEN}● Container is running${NC}"
        CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME} 2>/dev/null)
        if [ -n "$CONTAINER_IP" ]; then
            echo -e "  ${CYAN}IP Address: ${CONTAINER_IP}${NC}"
        fi
    else
        echo -e "  ${RED}○ Container is stopped${NC}"
    fi
}

# Function to sync settings
sync_settings() {
    local target=$1
    
    case "$target" in
        cursor-settings|cursor)
            echo -e "${YELLOW}Syncing Cursor settings...${NC}"
            read -p "This will overwrite your current Cursor settings. Continue? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                if [ -f "$SCRIPT_DIR/setup-scripts/sync-cursor-settings.sh" ]; then
                    bash "$SCRIPT_DIR/setup-scripts/sync-cursor-settings.sh"
                else
                    echo -e "${RED}Error: sync-cursor-settings.sh not found${NC}"
                    exit 1
                fi
            else
                echo -e "${YELLOW}Sync cancelled${NC}"
            fi
            ;;
        vscode-settings|vscode)
            echo -e "${YELLOW}Syncing VS Code settings...${NC}"
            read -p "This will overwrite your current VS Code settings. Continue? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                if [ -f "$SCRIPT_DIR/setup-scripts/sync-vscode-settings.sh" ]; then
                    bash "$SCRIPT_DIR/setup-scripts/sync-vscode-settings.sh"
                else
                    echo -e "${RED}Error: sync-vscode-settings.sh not found${NC}"
                    exit 1
                fi
            else
                echo -e "${YELLOW}Sync cancelled${NC}"
            fi
            ;;
        *)
            echo -e "${RED}Error: Unknown sync target: $target${NC}"
            echo "Available targets: cursor-settings, vscode-settings"
            exit 1
            ;;
    esac
}

# Main command processing
case "${1:-}" in
    start|up)
        echo -e "${GREEN}Starting development container...${NC}"
        # Remove old SSH key before starting
        ssh-keygen -R "[localhost]:2222" 2>/dev/null || true
        docker compose up -d
        # Wait a moment for SSH to be ready
        sleep 2
        # Add new host key
        ssh-keyscan -p 2222 -H localhost >> ~/.ssh/known_hosts 2>/dev/null || true
        echo -e "${GREEN}✓ Container started${NC}"
        show_status
        ;;
    
    stop|down)
        echo -e "${YELLOW}Stopping development container...${NC}"
        docker compose down
        echo -e "${GREEN}✓ Container stopped${NC}"
        ;;
    
    connect)
        if ! is_running; then
            echo -e "${RED}Error: Container is not running${NC}"
            echo "Start it with: ./devvy start"
            exit 1
        fi
        bash "$SCRIPT_DIR/setup-scripts/connect.sh"
        ;;
    
    logs)
        echo -e "${CYAN}Showing container logs (Ctrl+C to exit)...${NC}"
        docker compose logs -f
        ;;
    
    rebuild)
        echo -e "${YELLOW}Rebuilding container from scratch...${NC}"
        # Use the rebuild script that handles SSH keys
        if [ -f "$SCRIPT_DIR/setup-scripts/rebuild.sh" ]; then
            bash "$SCRIPT_DIR/setup-scripts/rebuild.sh" --no-cache
        else
            # Fallback to manual rebuild
            docker compose down
            docker compose build --no-cache
            echo -e "${GREEN}✓ Container rebuilt${NC}"
            echo -e "${CYAN}Run './devvy start' to start the new container${NC}"
        fi
        ;;
    
    init)
        echo -e "${MAGENTA}Running initial setup...${NC}"
        if [ -f "$SCRIPT_DIR/setup-scripts/setup.sh" ]; then
            bash "$SCRIPT_DIR/setup-scripts/setup.sh"
        else
            echo -e "${RED}Error: setup.sh not found${NC}"
            exit 1
        fi
        ;;
    
    sync)
        if [ -z "${2:-}" ]; then
            echo -e "${RED}Error: Please specify what to sync${NC}"
            echo "Usage: ./devvy sync <cursor-settings|vscode-settings>"
            exit 1
        fi
        sync_settings "$2"
        ;;
    
    cleanup)
        echo -e "${YELLOW}Running cleanup...${NC}"
        if [ -f "$SCRIPT_DIR/setup-scripts/cleanup.sh" ]; then
            bash "$SCRIPT_DIR/setup-scripts/cleanup.sh"
        else
            echo -e "${RED}Error: cleanup.sh not found${NC}"
            exit 1
        fi
        ;;
    
    status)
        show_status
        ;;
    
    help|--help|-h)
        show_help
        ;;
    
    "")
        show_help
        ;;
    
    *)
        echo -e "${RED}Error: Unknown command: $1${NC}"
        echo
        show_help
        exit 1
        ;;
esac